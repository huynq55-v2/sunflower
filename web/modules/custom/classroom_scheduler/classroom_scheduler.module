<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_node_update().
 */
function classroom_scheduler_node_update(NodeInterface $node) {
  if ($node->bundle() !== 'lesson') {
    return;
  }

  $old_value = $node->original->get('field_is_happened')->value ?? 0;
  $new_value = $node->get('field_is_happened')->value ?? 0;

  /** @var \Drupal\node\NodeInterface $classroom */
  $classroom = $node->get('field_classroom')->entity;
  if (!$classroom) {
    \Drupal::messenger()->addError('Không tìm thấy lớp học.');
    return;
  }

  $fee = (int) $classroom->get('field_fee')->value;
  $teacher = $classroom->get('field_teacher')->entity ?? NULL;
  $students = $node->get('field_student_list')->referencedEntities();

  if ($fee <= 0 || !$teacher) {
    \Drupal::messenger()->addError('Lớp học chưa có học phí hoặc giáo viên.');
    return;
  }

  $lesson_label = $node->label();
  $class_label = $classroom->label();

  // ========== CASE 1: Chuyển từ "chưa học" -> "đã học" ==========
  if ($old_value == 0 && $new_value == 1) {
    // 🧩 Xử lý học sinh
    foreach ($students as $student) {
      $student_account = sunflower_get_account_for($student->id(), $classroom->id());
      if (!$student_account) continue;

      $balance = (int) $student_account->get('field_balance')->value;
      $new_balance = $balance - $fee;

      // Cập nhật balance
      $student_account->set('field_balance', $new_balance);
      $student_account->save();

      // Ghi lại giao dịch
      $transaction = Node::create([
        'type' => 'transaction',
        'title' => "Học phí {$lesson_label} - {$student->label()}",
        'field_lesson' => ['target_id' => $node->id()],
        'field_account' => ['target_id' => $student_account->id()],
        'field_amount' => $fee,
        'field_type' => 'debit',
        'field_balance_after' => $new_balance,
      ]);
      $transaction->save();
    }

    // 🧩 Xử lý giáo viên
    $teacher_account = sunflower_get_account_for($teacher->id(), $classroom->id());
    if ($teacher_account) {
      $total_credit = count($students) * $fee;
      $balance = (int) $teacher_account->get('field_balance')->value;
      $new_balance = $balance + $total_credit;

      $teacher_account->set('field_balance', $new_balance);
      $teacher_account->save();

      $transaction = Node::create([
        'type' => 'transaction',
        'title' => "Thu nhập {$lesson_label} - {$teacher->label()}",
        'field_lesson' => ['target_id' => $node->id()],
        'field_account' => ['target_id' => $teacher_account->id()],
        'field_amount' => $total_credit,
        'field_type' => 'credit',
        'field_balance_after' => $new_balance,
      ]);
      $transaction->save();
    }

    \Drupal::messenger()->addStatus("✅ Đã tạo giao dịch cho buổi học {$lesson_label}.");
  }

  // ========== CASE 2: Chuyển từ "đã học" -> "chưa học" ==========
  if ($old_value == 1 && $new_value == 0) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'transaction')
      ->condition('field_lesson', $node->id())
      ->accessCheck(FALSE);
    $transaction_ids = $query->execute();

    if ($transaction_ids) {
      $transactions = Node::loadMultiple($transaction_ids);

      // Gom các account bị ảnh hưởng
      $affected_accounts = [];

      foreach ($transactions as $txn) {
        $account = $txn->get('field_account')->entity;
        if (!$account) continue;

        $amount = (int) $txn->get('field_amount')->value;
        $type = $txn->get('field_type')->value;

        if ($type === 'debit') {
          $account->set('field_balance', $account->get('field_balance')->value + $amount);
        }
        elseif ($type === 'credit') {
          $account->set('field_balance', $account->get('field_balance')->value - $amount);
        }

        $account->save();
        $txn->delete();
      }

      // Recalculate lại balance của các account bị ảnh hưởng
      foreach ($affected_accounts as $account) {
        $query_all = \Drupal::entityQuery('node')
          ->condition('type', 'transaction')
          ->condition('field_account', $account->id())
          ->sort('created', 'ASC')
          ->accessCheck(FALSE);

        $all_ids = $query_all->execute();

        $running_balance = 0;
        if ($all_ids) {
          $all_txns = Node::loadMultiple($all_ids);

          foreach ($all_txns as $t) {
            $type = $t->get('field_type')->value;
            $amount = (int) $t->get('field_amount')->value;

            if ($type === 'debit') {
              $running_balance -= $amount;
            } else {
              $running_balance += $amount;
            }

            $t->set('field_balance_after', $running_balance);
            $t->save();
          }
        }

        $account->set('field_balance', $running_balance);
        $account->save();
      }

      \Drupal::messenger()->addStatus("↩️ Đã xóa giao dịch của buổi học và cập nhật lại số dư các tài khoản.");
    }
  }
}

/**
 * Helper: Lấy Account node cho user + classroom.
 *
 * @param int $uid
 * @param int $classroom_id
 * @return \Drupal\node\Entity\Node|null
 */
function sunflower_get_account_for($uid, $classroom_id) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'account')
    ->condition('field_student', $uid)
    ->condition('field_classroom', $classroom_id)
    ->accessCheck(FALSE);

  $ids = $query->execute();
  if (empty($ids)) return NULL;

  $account_id = reset($ids);
  return Node::load($account_id);
}

/**
 * Implements hook_form_alter().
 */
function classroom_scheduler_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_lesson_form') {
    $request = \Drupal::request();
    $classroom_id = $request->query->get('field_classroom');

    // 🧩 Nếu tạo buổi học mới từ đường dẫn có classroom_id
    if ($classroom_id && ($classroom = Node::load($classroom_id))) {
      // ✅ Điền sẵn classroom
      $form['field_classroom']['widget'][0]['target_id']['#default_value'] = $classroom;
      $form['field_classroom']['widget'][0]['target_id']['#disabled'] = TRUE;
      $form['field_classroom']['widget'][0]['target_id']['#attributes']['readonly'] = 'readonly';

      // ✅ Clone danh sách học sinh từ classroom sang lesson
      if ($classroom->hasField('field_student_list')) {
        $student_refs = [];
        foreach ($classroom->get('field_student_list')->referencedEntities() as $student) {
          $student_refs[] = ['target_id' => $student->id()];
        }
        if (!empty($student_refs)) {
          $form['field_student_list']['widget']['#default_value'] = $classroom->get('field_student_list')->referencedEntities();
        }
      }

      // ✅ Gợi ý tên buổi học
      $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
      $query->condition('type', 'lesson');
      $query->condition('field_classroom', $classroom_id);
      $query->accessCheck(FALSE);
      $count = $query->count()->execute();

      $next_number = $count + 1;
      $title_suggest = $classroom->label() . ' buổi ' . str_pad($next_number, 3, '0', STR_PAD_LEFT);
      $form['title']['widget'][0]['value']['#default_value'] = $title_suggest;
    }
  }
}
