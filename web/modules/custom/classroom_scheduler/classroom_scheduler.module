<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_node_update().
 */
function classroom_scheduler_node_update(NodeInterface $node) {
  if ($node->bundle() !== 'lesson') {
    return;
  }

  $old_value = $node->original->get('field_is_happened')->value ?? 0;
  $new_value = $node->get('field_is_happened')->value ?? 0;

  /** @var \Drupal\node\NodeInterface $classroom */
  $classroom = $node->get('field_classroom')->entity;
  if (!$classroom) {
    \Drupal::messenger()->addError('Không tìm thấy lớp học.');
    return;
  }

  $fee = (int) $classroom->get('field_fee')->value;
  $teacher = $classroom->get('field_teacher')->entity ?? NULL;
  $students = $classroom->get('field_student_list')->referencedEntities();

  if ($fee <= 0 || !$teacher) {
    \Drupal::messenger()->addError('Lớp học chưa có học phí hoặc giáo viên.');
    return;
  }

  $lesson_label = $node->label();
  $class_label = $classroom->label();

  // ========== CASE 1: Chuyển từ "chưa học" -> "đã học" ==========
  if ($old_value == 0 && $new_value == 1) {
    foreach ($students as $student) {
      if (!$student->hasField('field_account_balance')) continue;

      $balance = (int) $student->get('field_account_balance')->value;
      $new_balance = $balance - $fee;
      $student->set('field_account_balance', $new_balance);
      $student->save();

      $transaction = Node::create([
        'type' => 'transaction',
        'title' => "Giao dịch {$lesson_label} - Học sinh",
        'field_user' => ['target_id' => $student->id()],
        'field_lesson' => ['target_id' => $node->id()],
        'field_classroom' => ['target_id' => $classroom->id()],
        'field_amount' => $fee,
        'field_type' => 'debit',
        'field_balance_after' => $new_balance,
      ]);
      $transaction->save();
    }

    // Giáo viên được cộng tổng tiền học sinh
    $total_credit = count($students) * $fee;
    if ($teacher->hasField('field_account_balance')) {
      $balance = (int) $teacher->get('field_account_balance')->value;
      $new_balance = $balance + $total_credit;
      $teacher->set('field_account_balance', $new_balance);
      $teacher->save();

      $transaction = Node::create([
        'type' => 'transaction',
        'title' => "Giao dịch {$lesson_label} - Giáo viên",
        'field_user' => ['target_id' => $teacher->id()],
        'field_lesson' => ['target_id' => $node->id()],
        'field_classroom' => ['target_id' => $classroom->id()],
        'field_amount' => $total_credit,
        'field_type' => 'credit',
        'field_balance_after' => $new_balance,
      ]);
      $transaction->save();
    }

    \Drupal::messenger()->addStatus("✅ Đã tạo giao dịch cho buổi học {$lesson_label}.");
  }

  // ========== CASE 2: Chuyển từ "đã học" -> "chưa học" (Undo) ==========
  if ($old_value == 1 && $new_value == 0) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'transaction')
      ->condition('field_lesson', $node->id())
      ->accessCheck(FALSE);
    $transaction_ids = $query->execute();

    if ($transaction_ids) {
      $transactions = \Drupal\node\Entity\Node::loadMultiple($transaction_ids);

      // Gom theo user để recalculation sau khi xóa.
      $affected_users = [];

      foreach ($transactions as $txn) {
        $user = $txn->get('field_user')->entity;
        if (!$user) continue;
        $affected_users[$user->id()] = $user;

        // 🧩 Xóa transaction của buổi học bị hủy
        $txn->delete();
      }

      // 🧩 Recalculate lại balance cho từng user bị ảnh hưởng
      foreach ($affected_users as $uid => $user) {
        // 💡 Lấy TẤT CẢ các node tài chính liên quan đến user này
        $query_all = \Drupal::entityQuery('node')
          ->condition('type', ['transaction', 'transaction_log'], 'IN')
          ->sort('created', 'ASC')
          ->accessCheck(FALSE);

        // *** SỬA LỖI TẠI ĐÂY ***
        // Tạo một nhóm điều kiện OR để tìm user trên cả 2 trường khác nhau
        $user_condition_group = $query_all->orConditionGroup()
          ->condition('field_user', $uid)
          ->condition('field_student', $uid); // Giả sử field_student cũng tham chiếu đến User

        // Áp dụng nhóm điều kiện vào query chính
        $query_all->condition($user_condition_group);

        $all_ids = $query_all->execute();

        $running_balance = 0;
        if ($all_ids) {
          $all_txns = \Drupal\node\Entity\Node::loadMultiple($all_ids);

          foreach ($all_txns as $t) {
            $bundle = $t->bundle();
            $amount = (int) $t->get('field_amount')->value;

            if ($bundle === 'transaction') {
              $type = $t->get('field_type')->value;
              if ($type === 'debit') {
                $running_balance -= $amount;
              } else {
                $running_balance += $amount;
              }
            }
            elseif ($bundle === 'transaction_log') {
              $running_balance += $amount;
            }

            if ($t->hasField('field_balance_after')) {
              $t->set('field_balance_after', $running_balance);
              $t->save();
            }
          }
        }

        // Cập nhật lại số dư cuối cùng trong tài khoản của user
        $user->set('field_account_balance', $running_balance);
        $user->save();
      }

      \Drupal::messenger()->addStatus("↩️ Đã xóa giao dịch của buổi học và cập nhật lại lịch sử tài khoản.");
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function classroom_scheduler_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_lesson_form') {
    $request = \Drupal::request();
    $classroom_id = $request->query->get('field_classroom');

    if ($classroom_id && ($classroom = Node::load($classroom_id))) {
      // ✅ Điền sẵn classroom.
      $form['field_classroom']['widget'][0]['target_id']['#default_value'] = $classroom;

      // Khóa field lại, user không thay đổi được.
      $form['field_classroom']['widget'][0]['target_id']['#disabled'] = TRUE;
      $form['field_classroom']['widget'][0]['target_id']['#attributes']['readonly'] = 'readonly';

      // ✅ Tính số buổi học hiện có.
      $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
      $query->condition('type', 'lesson');
      $query->condition('field_classroom', $classroom_id);
      $query->accessCheck(FALSE); // Bỏ check quyền để đếm chính xác
      $count = $query->count()->execute();

      // ✅ Gợi ý Title: "Tên lớp học buổi {count+1}".
      $next_number = $count + 1;
      $title_suggest = $classroom->label() . ' buổi ' . str_pad($next_number, 2, '0', STR_PAD_LEFT);

      // Gán vào Title mặc định.
      $form['title']['widget'][0]['value']['#default_value'] = $title_suggest;
    }
  }
}
