<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_node_update().
 */
function classroom_scheduler_node_update(NodeInterface $node) {
  if ($node->bundle() !== 'lesson') {
    return;
  }

  $old_value = $node->original->get('field_is_happened')->value ?? 0;
  $new_value = $node->get('field_is_happened')->value ?? 0;

  /** @var \Drupal\node\NodeInterface $classroom */
  $classroom = $node->get('field_classroom')->entity;
  if (!$classroom) {
    \Drupal::messenger()->addError('Không tìm thấy lớp học.');
    return;
  }

  $fee = (int) $classroom->get('field_fee')->value;
  $teacher = $classroom->get('field_teacher')->entity ?? NULL;
  $students = $node->get('field_student_list')->referencedEntities();

  if ($fee <= 0 || !$teacher) {
    \Drupal::messenger()->addError('Lớp học chưa có học phí hoặc giáo viên.');
    return;
  }

  $lesson_label = $node->label();
  $study_time = $node->get('field_study_time')->value;
  $timestamp = $study_time ? strtotime($study_time) : time();

  // ========== CASE 1: "chưa học" -> "đã học" ==========
  if ($old_value == 0 && $new_value == 1) {
    foreach ($students as $student) {
      $account = sunflower_get_account_for($student->id(), $classroom->id());
      if (!$account) continue;

      $fee_amount = $fee;

      $txn = Node::create([
        'type' => 'transaction',
        'title' => "Học phí {$lesson_label} - {$student->label()}",
        'field_lesson' => ['target_id' => $node->id()],
        'field_account' => ['target_id' => $account->id()],
        'field_amount' => $fee_amount,
        'field_type' => 'debit',
        'field_date' => substr($study_time, 0, 10),
      ]);
      $txn->setCreatedTime($timestamp);
      $txn->save();

      // ✅ Thêm transaction này vào field_transactions (và giữ thứ tự thời gian)
      sunflower_update_account_transactions($account, $txn);

      sunflower_recalculate_account_balance($account);
    }

    // 🧩 Giáo viên
    $teacher_account = sunflower_get_account_for($teacher->id(), $classroom->id());
    if ($teacher_account) {
      $total_credit = count($students) * $fee;

      $txn = Node::create([
        'type' => 'transaction',
        'title' => "Thu nhập {$lesson_label} - {$teacher->label()}",
        'field_lesson' => ['target_id' => $node->id()],
        'field_account' => ['target_id' => $teacher_account->id()],
        'field_amount' => $total_credit,
        'field_type' => 'credit',
        'field_date' => substr($study_time, 0, 10),
      ]);
      $txn->setCreatedTime($timestamp);
      $txn->save();

      sunflower_update_account_transactions($teacher_account, $txn);
      sunflower_recalculate_account_balance($teacher_account);
    }

    \Drupal::messenger()->addStatus("✅ Đã tạo giao dịch cho buổi học {$lesson_label}.");
  }

  // ========== CASE 2: "đã học" -> "chưa học" ==========
  if ($old_value == 1 && $new_value == 0) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'transaction')
      ->condition('field_lesson', $node->id())
      ->accessCheck(FALSE);
    $txn_ids = $query->execute();

    if ($txn_ids) {
      $txns = Node::loadMultiple($txn_ids);
      $affected_accounts = [];

      foreach ($txns as $txn) {
        $account = $txn->get('field_account')->entity;
        if (!$account) continue;

        $amount = (int) $txn->get('field_amount')->value;
        $type = $txn->get('field_type')->value;

        $account->save();

        // ✅ Xóa transaction khỏi field_transactions
        sunflower_remove_transaction_from_account($account, $txn);

        $affected_accounts[$account->id()] = $account;
        $txn->delete();
      }

      foreach ($affected_accounts as $acc) {
        sunflower_recalculate_account_balance($acc);
      }

      \Drupal::messenger()->addStatus("↩️ Đã xóa giao dịch của buổi học và cập nhật lại lịch sử tài khoản.");
    }
  }
}

/**
 * Helper: Lấy Account node cho user + classroom.
 *
 * @param int $uid
 * @param int $classroom_id
 * @return \Drupal\node\Entity\Node|null
 */
function sunflower_get_account_for($uid, $classroom_id) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'account')
    ->condition('field_student', $uid)
    ->condition('field_classroom', $classroom_id)
    ->accessCheck(FALSE);

  $ids = $query->execute();
  if (empty($ids)) return NULL;

  $account_id = reset($ids);
  return Node::load($account_id);
}

/**
 * Implements hook_form_alter().
 */
function classroom_scheduler_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_lesson_form') {
    $request = \Drupal::request();
    $classroom_id = $request->query->get('field_classroom');

    // 🧩 Nếu tạo buổi học mới từ đường dẫn có classroom_id
    if ($classroom_id && ($classroom = Node::load($classroom_id))) {
      // ✅ Điền sẵn classroom
      $form['field_classroom']['widget'][0]['target_id']['#default_value'] = $classroom;
      $form['field_classroom']['widget'][0]['target_id']['#disabled'] = TRUE;
      $form['field_classroom']['widget'][0]['target_id']['#attributes']['readonly'] = 'readonly';

      // ✅ Clone danh sách học sinh từ classroom sang lesson
      if ($classroom->hasField('field_student_list')) {
        $student_refs = [];
        foreach ($classroom->get('field_student_list')->referencedEntities() as $student) {
          $student_refs[] = ['target_id' => $student->id()];
        }
        if (!empty($student_refs)) {
          $form['field_student_list']['widget']['#default_value'] = $classroom->get('field_student_list')->referencedEntities();
        }
      }

      // ✅ Gợi ý tên buổi học
      $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
      $query->condition('type', 'lesson');
      $query->condition('field_classroom', $classroom_id);
      $query->accessCheck(FALSE);
      $count = $query->count()->execute();

      $next_number = $count + 1;
      $title_suggest = $classroom->label() . ' buổi ' . str_pad($next_number, 3, '0', STR_PAD_LEFT);
      $form['title']['widget'][0]['value']['#default_value'] = $title_suggest;
    }
  }
}

/**
 * Recalculate account balance.
 *
 * @param int|\Drupal\node\NodeInterface $account
 *   Account node or nid.
 * @param bool $only_unpaid
 *   If TRUE, include only transactions where field_has_calculated_money is not set or FALSE.
 *   If FALSE, include all transactions.
 */
function sunflower_recalculate_account_balance($account, $only_unpaid = TRUE) {
  static $running_accounts = [];

  // Load node if numeric.
  if (is_numeric($account)) {
    $account = Node::load((int) $account);
  }

  if (!$account instanceof NodeInterface || $account->bundle() !== 'account') {
    \Drupal::logger('sunflower')->error('sunflower_recalculate_account_balance() called with invalid account.');
    return;
  }

  $account_id = $account->id();

  // Prevent recursion for the same account in one request.
  if (!empty($running_accounts[$account_id])) {
    \Drupal::logger('sunflower')->debug('Skip recursive recalc for account @id', ['@id' => $account_id]);
    return;
  }
  $running_accounts[$account_id] = TRUE;

  try {
    \Drupal::logger('sunflower')->notice('Start recalculating account @id (@title) — only_unpaid: @u', [
      '@id' => $account_id,
      '@title' => $account->label(),
      '@u' => $only_unpaid ? '1' : '0',
    ]);

    // Build query for transaction nodes related to this account.
    $query = \Drupal::entityQuery('node')
      ->condition('type', ['transaction', 'transaction_log'], 'IN')
      ->condition('field_account', $account_id)
      ->accessCheck(FALSE);

    // If only_unpaid requested, add condition: either field doesn't exist or equals 0.
    if ($only_unpaid) {
      $group = $query->orConditionGroup()
        ->notExists('field_has_calculated_money')
        ->condition('field_has_calculated_money', 0);
      $query->condition($group);
    }

    $txn_ids = $query->execute();

    $transactions = Node::loadMultiple($txn_ids);

    // Build sortable list with effective timestamps.
    $items = [];
    foreach ($transactions as $txn) {
      $effective_ts = NULL;

      // transaction -> prefer lesson.field_study_time (date only => start of day)
      if ($txn->bundle() === 'transaction' && $txn->hasField('field_lesson') && !$txn->get('field_lesson')->isEmpty()) {
        $lesson = $txn->get('field_lesson')->entity;
        if ($lesson && $lesson->hasField('field_study_time') && !$lesson->get('field_study_time')->isEmpty()) {
          $val = $lesson->get('field_study_time')->value;
          if ($val) {
            $effective_ts = strtotime($val . ' 00:00:00');
          }
        }
      }

      // transaction_log or fallback -> field_date (datetime) if present
      if ($effective_ts === NULL && $txn->hasField('field_date') && !$txn->get('field_date')->isEmpty()) {
        $val = $txn->get('field_date')->value;
        if ($val) {
          $effective_ts = strtotime($val);
        }
      }

      // fallback -> created time
      if ($effective_ts === NULL) {
        $effective_ts = (int) $txn->getCreatedTime();
      }

      $items[] = [
        'txn' => $txn,
        'eff' => (int) $effective_ts,
        'created' => (int) $txn->getCreatedTime(),
        'nid' => (int) $txn->id(),
      ];
    }

    // Sort: effective asc, created asc, nid asc.
    usort($items, function ($a, $b) {
      if ($a['eff'] !== $b['eff']) {
        return $a['eff'] <=> $b['eff'];
      }
      if ($a['created'] !== $b['created']) {
        return $a['created'] <=> $b['created'];
      }
      return $a['nid'] <=> $b['nid'];
    });

    // Compute running balance.
    $running_balance = 0;
    foreach ($items as $it) {
      /** @var \Drupal\node\Entity\Node $t */
      $t = $it['txn'];
      $amount = 0.0;
      if ($t->hasField('field_amount') && !$t->get('field_amount')->isEmpty()) {
        $amount = (float) $t->get('field_amount')->value;
      }

      if ($t->bundle() === 'transaction') {
        // debit => subtract, credit => add
        $type = $t->hasField('field_type') ? $t->get('field_type')->value : NULL;
        if ($type === 'debit') {
          $running_balance -= $amount;
        } elseif ($type === 'credit') {
          $running_balance += $amount;
        } else {
          // if missing, assume debit? we will log and skip change
          \Drupal::logger('sunflower')->warning('Transaction @id missing field_type; skipping sign', ['@id' => $t->id()]);
          $running_balance += 0;
        }
      } else {
        // transaction_log: add amount directly (amount may be negative for deduction)
        $running_balance += $amount;
      }

      \Drupal::logger('sunflower')->debug('Txn @id (@bundle) eff=@time amount=@amt => running=@bal', [
        '@id' => $t->id(),
        '@bundle' => $t->bundle(),
        '@time' => date('Y-m-d H:i:s', $it['eff']),
        '@amt' => $amount,
        '@bal' => (int) $running_balance,
      ]);
    }

    $account->save();

    \Drupal::logger('sunflower')->info('Recalc finished for account @id final balance=@bal (only_unpaid=@u)', [
      '@id' => $account_id,
      '@bal' => (int) $running_balance,
      '@u' => $only_unpaid ? '1' : '0',
    ]);
  }
  catch (\Throwable $e) {
    \Drupal::logger('sunflower')->error('Exception in sunflower_recalculate_account_balance(@id): @m', [
      '@id' => $account_id,
      '@m' => $e->getMessage(),
    ]);
  }
  finally {
    $running_accounts[$account_id] = FALSE;
  }
}

/**
 * Thêm 1 transaction vào danh sách field_transactions của account theo đúng thứ tự thời gian.
 */
function sunflower_update_account_transactions(Node $account, Node $txn) {
  $refs = $account->get('field_transactions')->referencedEntities();
  $refs[] = $txn;

  // Sắp xếp lại theo thời gian hiệu lực
  usort($refs, function($a, $b) {
    $timeA = sunflower_get_transaction_timestamp($a);
    $timeB = sunflower_get_transaction_timestamp($b);
    return $timeA <=> $timeB;
  });

  $account->set('field_transactions', array_map(fn($t) => ['target_id' => $t->id()], $refs));
  $account->save();
}

/**
 * Xóa transaction khỏi danh sách field_transactions của account.
 */
function sunflower_remove_transaction_from_account(Node $account, Node $txn) {
  $items = $account->get('field_transactions')->getValue();
  $new_items = array_filter($items, fn($i) => $i['target_id'] != $txn->id());
  $account->set('field_transactions', array_values($new_items));
  $account->save();
}

/**
 * Xác định timestamp thực của 1 transaction (dựa vào date/lesson/study_time).
 */
function sunflower_get_transaction_timestamp(Node $txn) {
  // Ưu tiên field_date
  if ($txn->hasField('field_date') && !$txn->get('field_date')->isEmpty()) {
    return strtotime($txn->get('field_date')->value);
  }

  // Nếu có buổi học, lấy field_study_time
  if ($txn->hasField('field_lesson') && !$txn->get('field_lesson')->isEmpty()) {
    $lesson = $txn->get('field_lesson')->entity;
    if ($lesson && !$lesson->get('field_study_time')->isEmpty()) {
      return strtotime($lesson->get('field_study_time')->value);
    }
  }

  // Fallback: thời gian tạo node
  return $txn->getCreatedTime();
}
